---
- name: Web and DB servers Playbook (Apache, PHP[php-fpm], MySQL)
  hosts: all
  become: true
  tasks:
    - name: Install prerequisites
      apt: name=aptitude update_cache=yes state=latest force_apt_get=yes
      tags: [ system ]

# WEB HOST
- hosts: web
  remote_user: vagrant
  become: true
  vars_files:
    - vars/default.yml
  tasks:
    # Packages Installation
    - name: Install Apache2, PHP 8.1 FPM and main libraries
      apt: name={{ item }} update_cache=yes state=latest
      loop: [ 'apache2', 'php8.1', 'php8.1-fpm', 'libapache2-mod-php8.1', 'php8.1-common', 'unzip' ]
      tags: [ system ]

    - name: Install PHP Extensions
      apt: name={{ item }} update_cache=yes state=latest
      loop: "{{ php_modules }}"
      tags: [ system ]

    # Self-Signed SSL Certificate
    - name: Create directory for self SSL certificates
      file:
        path: "/etc/ssl/{{ ssl_sertificates_dir }}"
        state: directory
        owner: "{{ http_owner }}"
        group: "{{ http_group }}"
        mode: '0755'
      tags: [ ssl ]

    - name: Create private key (RSA, 2048 bits)
      community.crypto.openssl_privatekey:
        path: /etc/ssl/{{ ssl_sertificates_dir }}/{{ ssl_sertificate_name }}.key
        size: 2048
      tags: [ ssl ]

    - name: Create the SSL Certificate
      community.crypto.x509_certificate:
        path: /etc/ssl/{{ ssl_sertificates_dir }}/{{ ssl_sertificate_name }}.pem
        privatekey_path: /etc/ssl/{{ ssl_sertificates_dir }}/{{ ssl_sertificate_name }}.key
        provider: selfsigned
      tags: [ ssl ]

    # Apache Configuration
    - name: Create document root
      file:
        path: "/var/www/{{ http_host }}"
        state: directory
        owner: "{{ http_owner }}"
        group: "{{ http_group }}"
        mode: '0755'
      tags: [ apache ]

    - name: Copy index.html into document root
      template:
        src: "files/index.html.j2"
        dest: "/var/www/{{ http_host }}/index.html"
      tags: [ apache ]

    - name: Set up Apache VirtualHost
      template:
        src: "files/apache.conf.j2"
        dest: "/etc/apache2/sites-available/{{ http_conf }}"
      notify: Reload Apache
      tags: [ apache ]

    - name: Enable rewrite module
      shell: /usr/sbin/a2enmod rewrite
      notify: Reload Apache
      tags: [ apache ]

    - name: Enable new site
      shell: /usr/sbin/a2ensite {{ http_conf }}
      notify: Reload Apache
      tags: [ apache ]

    - name: Disable default Apache site
      shell: /usr/sbin/a2dissite 000-default.conf
      notify: Restart Apache
      tags: [ apache ]

    - name: Enable Apache Event modules
      shell: /usr/sbin/a2enmod proxy_fcgi setenvif
      notify: Reload Apache
      tags: [ apache ]

    # Configure Apache to use SSL
    - name: Create an Apache Configuration Snippet with Strong Encryption Settings
      template:
        src: "files/ssl-params.conf"
        dest: "/etc/apache2/conf-available/ssl-params.conf"
      tags: [ ssl, apache ]

    - name: Modify the Default Apache SSL Virtual Host File
      template:
        src: "files/default-ssl.conf.j2"
        dest: "/etc/apache2/sites-available/default-ssl.conf"
      tags: [ ssl, apache ]

    - name: Enable mod_ssl, the Apache SSL module and mod_headers
      shell: /usr/sbin/a2enmod ssl headers
      notify: Reload Apache
      tags: [ ssl, apache ]

    - name: Enable ssl-params.conf
      shell: /usr/sbin/a2enconf ssl-params
      notify: Restart Apache
      tags: [ ssl, apache ]

    - name: Enable SSL Virtual Host
      shell: /usr/sbin/a2ensite default-ssl
      notify: Restart Apache
      tags: [ ssl, apache ]

    # PHP Configuration
    - name: Enable PHP FPM Configuration
      shell: /usr/sbin/a2enconf php8.1-fpm
      notify: Restart php-fpm
      tags: [ php ]

    - name: Copy info.php into document root
      template:
        src: "files/info.php"
        dest: "/var/www/{{ http_host }}/info.php"
      tags: [ php ]

    # WordPress Configuration
    - name: Download and unpack latest WordPress
      unarchive:
        src: https://wordpress.org/latest.tar.gz
        dest: "/var/www/{{ http_host }}"
        remote_src: yes
        creates: "/var/www/{{ http_host }}/wordpress"
      tags: [ wordpress ]

    - name: Set up wp-config
      template:
        src: "files/wp-config.php.j2"
        dest: "/var/www/{{ http_host }}/wordpress/wp-config.php"
      tags: [ wordpress ]

    # UFW Configuration
    - name: "UFW - Allow HTTP on port {{ http_port }}"
      ufw:
        rule: allow
        port: "{{ http_port }}"
        proto: tcp
      tags: [ system ]

  handlers:
    - name: Reload Apache
      service:
        name: apache2
        state: reloaded

    - name: Restart Apache
      service:
        name: apache2
        state: restarted

    - name: Restart php-fpm
      command: service php8.1-fpm restart

    - name: restart mysql
      service: name=mysql
        enabled=yes
        state=restarted

# DB HOST
- hosts: db
  become: true
  remote_user: vagrant
  vars_files:
    - vars/default.yml
  tasks:
    - name: Install MySQL
      apt: name={{ item }} update_cache=yes state=latest
      loop: [ 'mysql-server', 'python3-pymysql' ]
      tags: [ system ]

     # MySQL Configuration
    - name: Set the root password
      mysql_user:
        name: root
        password: "{{ mysql_root_password }}"
        login_unix_socket: /var/run/mysqld/mysqld.sock
      tags: [ mysql, mysql-root ]

    - name: Remove all anonymous user accounts
      mysql_user:
        name: ''
        host_all: yes
        state: absent
        login_user: root
        login_password: "{{ mysql_root_password }}"
      tags: [ mysql ]

    - name: Remove the MySQL test database
      mysql_db:
        name: test
        state: absent
        login_user: root
        login_password: "{{ mysql_root_password }}"
      tags: [ mysql ]

    # allowed access for remove connections
    - name: Copy mysqld.cnf into MySQL conf directory
      template:
        src: "files/mysqld.cnf"
        dest: "/etc/mysql/mysql.conf.d/mysqld.cnf"
      notify: Restart mysql
      tags: [ mysql ]

    # Wordpress user/password/database
    - name: Create MySQL user for WordPress
      mysql_user:
        name: "{{ mysql_wordpress_user }}"
        password: "{{ mysql_wordpress_password }}"
        priv: "*.*:ALL,GRANT"
        host: "%"
        state: present
        login_user: root
        login_password: "{{ mysql_root_password }}"
      tags: [ mysql ]

    - name: Creates database for WordPress
      mysql_db:
        name: "{{ mysql_wordpress_db }}"
        state: present
        login_user: root
        login_password: "{{ mysql_root_password }}"
      tags: [ mysql ]

  handlers:
    - name: Restart mysql
      service:
        name: mysql
        enabled: yes
        state: restarted